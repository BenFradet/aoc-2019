namespace day2 where

  opCode : [Nat] -> (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat -> [Nat]
  opCode input f inIdx1 inIdx2 outIdx =
    case (at inIdx1 input, at inIdx2 input) of
      (Some v1, Some v2) -> List.replace outIdx (f v1 v2) input
      (_, _) -> input

  instruction : Nat -> [Nat] -> [Nat]
  instruction currentIdx input =
    case (at currentIdx input, at (currentIdx + 1) input, at (currentIdx + 2) input, at (currentIdx + 3) input) of
      (Some op, Some inIdx1, Some inIdx2, Some outIdx) ->
        if (op == 1) then opCode input (Nat.+) inIdx1 inIdx2 outIdx
        else if (op == 2) then opCode input (Nat.*) inIdx1 inIdx2 outIdx
        else input
      _ -> input

  intCode : [Nat] -> [Nat]
  intCode input =
    size = List.size input
    go idx input =
      if (idx >= size) then input
      else go (idx + 4) (instruction idx input)
    go 0 input

  replaceNV : [Nat] -> Nat -> Nat -> [Nat]
  replaceNV input nameValue verbValue =
    List.replace 1 nameValue (List.replace 2 verbValue input)

  condition : [Nat] -> Nat -> Nat -> Nat -> Boolean
  condition input neededOutput i j =
    List.at 0 (intCode (replaceNV input i j)) == (Some neededOutput)

  neededOutput : [Nat] -> Nat -> Nat -> Nat -> Optional (Nat, Nat)
  neededOutput input neededOut n m =
    uf t = case t of (i, j, f) ->
      if f then None
      else if j == m then Some ((i, j), (i + 1, 1, condition input neededOut i j))
      else if i == (n + 1) then None
      else Some ((i, j), (i, j + 1, condition input neededOut i j))
    case List.reverse (List.unfold (1, 1, false) uf) of
      h +: _ -> Some h
      _ -> None

use day2 intCode
use test.v1

test> tests.day2.intCode.ex1 = run ( expect (intCode [1,0,0,0,99] == [2,0,0,0,99]))
test> tests.day2.intCode.ex2 = run ( expect (intCode [2,3,0,3,99] == [2,3,0,6,99]))
test> tests.day2.intCode.ex3 = run ( expect (intCode [2,4,4,5,99,0] == [2,4,4,5,99,9801]))
test> tests.day2.intCode.ex4 = run ( expect (intCode [1,1,1,4,99,5,6,0,99] == [30,1,1,4,2,5,6,0,99]))

program = [1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,6,19,2,19,6,23,1,23,5,27,1,9,27,31,1,31,10,35,2,35,9,39,1,5,39,43,2,43,9,47,1,5,47,51,2,51,13,55,1,55,10,59,1,59,10,63,2,9,63,67,1,67,5,71,2,13,71,75,1,75,10,79,1,79,6,83,2,13,83,87,1,87,6,91,1,6,91,95,1,10,95,99,2,99,6,103,1,103,5,107,2,6,107,111,1,10,111,115,1,115,5,119,2,6,119,123,1,123,5,127,2,127,6,131,1,131,5,135,1,2,135,139,1,139,13,0,99,2,0,14,0]
alarmed = List.replace 2 2 (List.replace 1 12 program)

> List.at 0 (intCode alarmed)

> neededOutput program 19690720 100 100

