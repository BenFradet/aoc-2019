replicatePattern : Nat -> [a] -> [a]
replicatePattern n as =
  go as acc = case as of
    h +: t -> go t (acc ++ List.replicate n h)
    _ -> acc
  go as []

zipCont : [a] -> [b] -> [(a, b)]
zipCont as bs =
  go a b acc = case (a, b) of
    ([], _) -> acc
    (ta, []) -> go ta bs acc
    (ha +: ta, hb +: tb) -> go ta tb ((ha, hb) +: acc)
  go as bs [] |> List.reverse

offset : Nat -> [a] -> [a]
offset n as =
  go i as =
    if i >= n then as
    else case as of
      h +: t -> go (i + 1) t
      [] -> []
  go 0 as

filter : (a -> Boolean) -> [a] -> [a]
filter p as = case as of
  h +: t | p h -> h +: filter p t
  h +: t -> filter p t
  _ -> []

applyPattern : [Int] -> [Int] -> Int
applyPattern digits pattern =
  zipCont (+0 +: digits) pattern
    |> offset 1
    |> filter (p -> case p of (_, d) -> not (d == +0))
    |> List.map (p -> case p of (a, b) -> a Int.* b)
    |> List.foldl (Int.+) +0
    |> day3.abs
    |> (v -> Int.mod v +10)

applyPatterns : [Int] -> [Int] -> [Int]
applyPatterns digits basePattern =
  go ds i acc = case ds of
    h +: t ->
      res = replicatePattern i basePattern |> applyPattern digits
      go t (i + 1) (res +: acc)
    [] -> acc
  go digits 1 [] |> List.reverse

applyPs : Nat -> [Int] -> [Int] -> [Int]
applyPs n baseDigits basePattern =
  go i ds =
    if i > n then ds
    else
      go (i + 1) (applyPatterns ds basePattern)
  go 0 baseDigits

p = [+0, +1, +0, -1]
> replicatePattern 3 p
> replicatePattern 0 p
> zipCont (List.range 1 9) p
> offset 1 (List.range 1 9)
> applyPattern (List.range 1 9 |> List.map Nat.toInt) p
> applyPatterns (List.range 1 9 |> List.map Nat.toInt) p
> applyPs 2 (List.range 1 9 |> List.map Nat.toInt) p

use test.v1

ds1 = [+8,+0,+8,+7,+1,+2,+2,+4,+5,+8,+5,+9,+1,+4,+5,+4,+6,+6,+1,+9,+0,+8,+3,+2,+1,+8,+6,+4,+5,+5,+9,+5]
test> tests.day16.apply.ex1 = run ( expect ( applyPs 99 ds1 p |> List.take 8 == [+2, +4, +1, +7, +6, +1, +7, +6]))
ds2 = [+1,+9,+6,+1,+7,+8,+0,+4,+2,+0,+7,+2,+0,+2,+2,+0,+9,+1,+4,+4,+9,+1,+6,+0,+4,+4,+1,+8,+9,+9,+1,+7]
test> tests.day16.apply.ex2 = run ( expect ( applyPs 99 ds2 p |> List.take 8 == [+7, +3, +7, +4, +5, +4, +1, +8]))
ds3 = [+6,+9,+3,+1,+7,+1,+6,+3,+4,+9,+2,+9,+4,+8,+6,+0,+6,+3,+3,+5,+9,+9,+5,+9,+2,+4,+3,+1,+9,+8,+7,+3]
test> tests.day16.apply.ex3 = run ( expect ( applyPs 99 ds3 p |> List.take 8 == [+5, +2, +4, +3, +2, +1, +3, +3]))

ds = [+5,+9,+7,+6,+9,+6,+3,+8,+6,+3,+8,+6,+3,+5,+2,+2,+7,+7,+9,+2,+8,+7,+3,+8,+3,+9,+6,+0,+0,+6,+1,+9,+2,+9,+6,+1,+6,+1,+8,+3,+0,+2,+4,+3,+4,+1,+1,+8,+2,+6,+5,+6,+2,+6,+2,+0,+8,+0,+3,+7,+5,+5,+3,+5,+7,+6,+4,+1,+4,+0,+9,+7,+0,+2,+9,+4,+2,+4,+4,+1,+3,+8,+1,+9,+8,+2,+7,+9,+9,+2,+9,+7,+8,+8,+1,+6,+5,+9,+2,+8,+8,+8,+8,+8,+2,+4,+3,+7,+9,+3,+3,+2,+1,+1,+5,+4,+2,+9,+3,+1,+0,+2,+7,+4,+3,+3,+2,+5,+9,+0,+4,+7,+5,+7,+1,+9,+8,+6,+6,+8,+8,+2,+0,+2,+1,+3,+8,+8,+5,+3,+0,+7,+6,+1,+2,+9,+0,+0,+9,+7,+2,+2,+7,+3,+3,+1,+1,+4,+9,+9,+1,+8,+5,+9,+2,+9,+9,+0,+1,+1,+1,+7,+6,+6,+4,+3,+8,+7,+5,+5,+9,+6,+5,+7,+7,+0,+6,+1,+1,+0,+0,+3,+4,+9,+9,+2,+7,+8,+6,+4,+8,+9,+0,+0,+2,+4,+0,+0,+8,+5,+2,+4,+3,+8,+9,+6,+1,+7,+3,+8,+2,+1,+9,+6,+2,+7,+6,+3,+9,+8,+3,+0,+5,+1,+5,+1,+8,+5,+6,+1,+8,+1,+8,+4,+3,+2,+4,+9,+9,+5,+8,+8,+1,+9,+1,+4,+5,+3,+2,+2,+5,+6,+9,+8,+8,+8,+4,+3,+4,+3,+6,+5,+1,+1,+7,+3,+0,+9,+3,+2,+1,+4,+1,+3,+8,+0,+0,+1,+7,+1,+8,+0,+7,+9,+6,+6,+8,+1,+8,+7,+0,+2,+5,+6,+2,+4,+0,+7,+5,+7,+5,+8,+0,+4,+5,+4,+5,+0,+5,+0,+9,+6,+2,+3,+0,+6,+1,+0,+5,+2,+0,+4,+3,+0,+9,+9,+7,+5,+3,+6,+1,+4,+5,+3,+4,+1,+0,+7,+4,+5,+8,+5,+6,+3,+7,+1,+0,+5,+4,+5,+6,+4,+0,+1,+2,+3,+8,+2,+0,+9,+1,+8,+7,+1,+1,+8,+3,+9,+7,+0,+4,+6,+3,+7,+3,+5,+8,+9,+7,+6,+6,+4,+0,+8,+0,+8,+0,+1,+2,+0,+9,+8,+4,+8,+1,+7,+0,+3,+5,+6,+9,+9,+2,+2,+8,+4,+2,+2,+3,+6,+6,+9,+5,+2,+6,+2,+8,+3,+4,+4,+2,+3,+5,+5,+4,+2,+8,+4,+9,+8,+5,+0,+7,+0,+9,+1,+8,+1,+3,+6,+3,+7,+0,+3,+1,+7,+2,+3,+3,+4,+7,+8,+8,+7,+4,+4,+5,+3,+7,+3,+5,+7,+6,+0,+7,+4,+4,+6,+3,+2,+2,+9,+0,+3,+7,+4,+3,+6,+4,+4,+6,+7,+3,+8,+0,+0,+1,+4,+0,+7,+7,+0,+9,+8,+2,+2,+8,+3,+2,+9,+0,+0,+6,+8,+5,+0,+2,+9,+7,+2,+3,+9,+7,+9,+7,+0,+7,+9,+9,+3,+2,+8,+2,+4,+9,+1,+3,+2,+7,+7,+4,+2,+9,+3,+6,+0,+9,+7,+0,+0,+2,+4,+5,+0,+6,+5,+5,+2,+2,+2,+9,+0,+5,+6,+2,+3,+1,+9,+9,+5,+5,+7,+6,+8,+0,+9,+2,+1,+5,+5,+5,+3,+0,+2,+5,+0,+0,+0,+3,+5,+8,+7,+0,+0,+7,+8,+0,+4,+3,+0,+2,+3,+4,+4,+8,+6,+6,+5,+9,+8,+2,+3,+2,+2,+3,+6,+6,+4,+5,+4,+5,+3,+8,+1,+7,+2,+7,+3,+7,+4,+4,+0,+2,+7,+5,+3,+7,+6,+3,+0]
> applyPs 99 ds p |> List.take 8
