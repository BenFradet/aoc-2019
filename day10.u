namespace day10 where
  gcd : Int -> Int -> Nat
  gcd a b =
    if b == +0 then abs a
    else gcd b (Int.mod a b)

  generateLOS : Int -> Int -> [(Int, Int)]
  generateLOS a b =
    if (a, b) == (+0, +0) then []
    else
      g = gcd a b
      ig = Nat.toInt g
      ia = a / ig
      ib = b / ig
      go acc input = case input of
        h +: t -> go ((ia * (Nat.toInt h), ib * (Nat.toInt h)) +: acc) t
        _ -> acc
      List.range 1 g |> go []

  updateAsteroids : Int -> Int -> Map (Int, Int) Boolean -> Map (Int, Int) Boolean
  updateAsteroids a b map =
    f m a =
      if Map.contains a m then Map.insert a false m
      else m
    generateLOS a b
      |> List.foldl f map

  recenter : Nat -> Nat -> [(Nat, Nat)] -> [(Int, Int)]
  recenter xc yc as =
    go acc as = case as of
      (x, y) +: t -> go ((x - xc, y - yc) +: acc) t
      _ -> acc
    go [] as

  parseAsteroids : Text -> [(Nat, Nat)]
  parseAsteroids t =
    go acc i j input = case input of
      h +: t ->
        if h == ?\n then go acc 0 (j + 1) t
        else if h == ?# then go ((i, j) +: acc) (i + 1) j t
        else go acc (i + 1) j t
      _ -> acc
    Text.toCharList t
      |> go [] 0 0

  filter : (v -> Boolean) -> Map k v -> Map k v
  filter p m =
    go acc l = case l of
      (k, v) +: t -> if p v then go ((k, v) +: acc) t else go acc t
      _ -> acc
    Map.toList m
      |> go []
      |> Map.fromList

  detectedAsts : [(Int, Int)] -> [(Int, Int)]
  detectedAsts asts =
    m = List.map (p -> (p, true)) asts |> Map.fromList
    List.foldl (m -> p -> case p of (x, y) -> updateAsteroids x y m) m asts
      |> filter id
      |> Map.keys

  bestCenter : [(Nat, Nat)] -> ((Int, Int), Nat)
  bestCenter asts =
    f acc c = case c of (xc, yc) ->
      recenter xc yc asts
        |> detectedAsts
        |> (ds -> ((Nat.toInt xc, Nat.toInt yc), ds) +: acc)
    List.foldl f [] asts
      |> List.map (p -> (Tuple.at1 p, Tuple.at2 p |> List.size))
      |> List.foldl (old -> new -> case (old, new) of ((oldC, oldN), (newC, newN)) -> if (newN > oldN) then (newC, newN) else old) ((+0, +0), 0)

  detectedAstsNb : Text -> ((Int, Int), Nat)
  detectedAstsNb t =
    parseAsteroids t |> bestCenter

  difference : Set a -> Set a -> Set a
  difference a b =
    go acc as = case as of
      h +: t -> if Set.contains h b then go t acc else go t (h +: acc)
      _ -> acc
    Set.toList a |> go [] |> Set.fromList

  length : (Float, Float) -> Float
  length p = case p of (x, y) ->
    ((Float.pow x 2.0) + (Float.pow y 2.0)) |> Float.sqrt

  pi : Float
  pi = 3.14159

  dotP : (Float, Float) -> (Float, Float) -> Float
  dotP p1 p2 = case (p1, p2) of ((x1, y1), (x2, y2)) -> x1 * x2 + y1 * y2

  diffP : (Float, Float) -> (Float, Float) -> Float
  diffP p1 p2 = case (p1, p2) of ((x1, y1), (x2, y2)) -> y2 * x1 - x2 * y1

  merge : (a -> Float) -> [a] -> [a] -> [a]
  merge f xs ys = case (xs, ys) of
    ([], t) -> t
    (t, []) -> t
    (hx +: tx, hy +: ty) -> if (f hx) <= (f hy) then hx +: merge f tx ys else hy +: merge f xs ty

  split : [a] -> ([a], [a])
  split xs = case xs of
    [h1, h2] ++ t -> case split t of (t1, t2) -> (h1 +: t1, h2 +: t2)
    [h] -> ([h], [])
    _ -> ([], [])

  mergeSort : (a -> Float) -> [a] -> [a]
  mergeSort f xs = case xs of
    [] -> []
    [x] -> [x]
    t -> case split t of (as, bs) -> merge f (mergeSort f as) (mergeSort f bs)

  sort : (Int, Int) -> Float
  sort p = case p of (x, y) ->
    fx = Int.toFloat x
    fy = Int.toFloat y
    len = length (fx, fy)
    ref = (0.0, 1.0)
    if len == 0.0 then (0.0 - pi)
    else
      nx = fx / len
      ny = fy / len
      dot = dotP (nx, ny) ref
      diff = diffP (nx, ny) ref
      angle = Float.atan2 diff dot
      if angle < 0.0 then (2.0 * pi + angle)
      else (angle)

  --destroyAsts : Nat -> Text -> Optional (Int, Int)
  destroyAsts n t =
    asts = parseAsteroids t
    c = asts |> bestCenter |> Tuple.at1
    recentered = recenter (Tuple.at1 c |> abs) (Tuple.at2 c |> abs) asts
    go i acc asts =
      if i >= n then acc
      else
        detected = detectedAsts asts |> List.sortBy day10.sort
        s = List.size detected
        if i + s >= n then List.slice 0 (abs (n - i + +1)) detected
        else go (i + s) (acc ++ detected) (Set.fromList detected |> difference (Set.fromList asts) |> Set.toList)
    go 0 [] recentered
      |> List.map (p -> case p of (x, y) -> (x + (Tuple.at1 c), y + (Tuple.at2 c)))
      |> List.take n
      --|> List.at (abs (n - 1))
      --|> Optional.map (p -> case p of (x, y) -> (x + (Tuple.at1 c), y + (Tuple.at2 c)))

> mergeSort day10.sort [(+3, +2), (-1, +2), (-3, +2)]
> List.sortBy day10.sort [(+3, +2), (-1, +2), (-3, +2)]

> gcd +9 +3
> gcd -9 -6
> gcd -6 -9
> gcd +15 +13

> generateLOS +9 +3
> generateLOS +3 +0
> generateLOS +0 +3
> generateLOS +0 +0

> recenter 1 2 [(0, 0), (0, 1), (1, 0), (1, 1), (2, 1), (1, 2), (2, 2)]

--> detectedAstsNb ".#..#
--.....
--#####
--....#
--...##"
--
--> detectedAstsNb "......#.#.
--#..#.#....
--..#######.
--.#.#.###..
--.#..#.....
--..#....#.#
--#..#....#.
--.##.#..###
--##...#..#.
--.#....####"
--
--> detectedAstsNb "#.#...#.#.
--.###....#.
--.#....#...
--##.#.#.#.#
--....#.#.#.
--.##..###.#
--..#...##..
--..##....##
--......#...
--.####.###."
--
--> detectedAstsNb ".#..#..###
--####.###.#
--....###.#.
--..###.##.#
--##.##.#.#.
--....###..#
--..#.#..#.#
--#..#.#.###
--.##...##.#
--.....#.#.."
--
--> detectedAstsNb ".#..##.###...#######
--##.############..##.
--.#.######.########.#
--.###.#######.####.#.
--#####.##.#.##.###.##
--..#####..#.#########
--####################
--#.####....###.#.#.##
--##.#################
--#####.##.###..####..
--..######..##.#######
--####.##.####...##..#
--.#####..#.######.###
--##...#.##########...
--#.##########.#######
--.####.#.###.###.#.##
--....##.##.###..#####
--.#.#.###########.###
--#.#.#.#####.####.###
--###.##.####.##.#..##"

input10 = ".#......##.#..#.......#####...#..
...#.....##......###....#.##.....
..#...#....#....#............###.
.....#......#.##......#.#..###.#.
#.#..........##.#.#...#.##.#.#.#.
..#.##.#...#.......#..##.......##
..#....#.....#..##.#..####.#.....
#.............#..#.........#.#...
........#.##..#..#..#.#.....#.#..
.........#...#..##......###.....#
##.#.###..#..#.#.....#.........#.
.#.###.##..##......#####..#..##..
.........#.......#.#......#......
..#...#...#...#.#....###.#.......
#..#.#....#...#.......#..#.#.##..
#.....##...#.###..#..#......#..##
...........#...#......#..#....#..
#.#.#......#....#..#.....##....##
..###...#.#.##..#...#.....#...#.#
.......#..##.#..#.............##.
..###........##.#................
###.#..#...#......###.#........#.
.......#....#.#.#..#..#....#..#..
.#...#..#...#......#....#.#..#...
#.#.........#.....#....#.#.#.....
.#....#......##.##....#........#.
....#..#..#...#..##.#.#......#.#.
..###.##.#.....#....#.#......#...
#.##...#............#..#.....#..#
.#....##....##...#......#........
...#...##...#.......#....##.#....
.#....#.#...#.#...##....#..##.#.#
.#.#....##.......#.....##.##.#.##"

> destroyAsts 200 input10
