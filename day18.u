---
> "#################################################################################
#...#..j..........#.........#...........#.......#........n......#.....#........m#
#.#.#.#.###########.###.#####.#######O#####.###.#.#########.#.###.#.###.###.###.#
#.#.#.#...............#.Z.......#...#...#...#.#.#.#.......#.#.....#.....#.X.#...#
#.#.#.###########################P#.#.#.#.###.#.###.#####.###.###########.###.###
#.#.#.#.......#.........#......b..#.#.#.#.#.......#...#.#...#.....#.......#.....#
#.#.#.#.###.###.#######.#.#########.###.#.#######.###.#.###.#####.#.#############
#.#.#.#.#...#...#..l#...#.#.......#.#...#.....#.......#.#...#.....#.........#..k#
#.###.#.###.#.#####.#.###.#######.#.#.###.###.#########.#.###.#####.#######.#.#.#
#...#.#...#.#.#...#...#...#.....#.#...#.#...#...#.....#.#.#...#...#...#...#...#.#
#.#.#.#.#.###.#.#U###.###.#.###.#.#####.###.###.#.###.#.#.#.###.#.#####.#.#####F#
#.#.#.#.#...#...#...#.....#.#...#.......#...#g#...#.#.#...#.#...#...#.E.#.....#.#
#.#.#.#.###.#######.#######.###.###Y#.###.###.#####.#.###.###.#####.#.#######.#.#
#.#...#...#...#.....#......a..#...#.#...#.....#.....#...#.....#.......#.....#...#
#.#####D#####.#.#######.#####.###.###.#.#####.#.###.###.#################.#####.#
#.M...#.#...#.#.#c....#...#...#.#...#.#.#...#.#.#.#.#.#.#...............#...#...#
#####.###.#.#.#H#.###.#####.###.###.#.#.#.###.#.#.#.#.#.#.###########.#.###.#.###
#...#.....#.#.#.#...#...#...#.....#.#.#.#...#.#.#.....#.......#.....#.#.#...#.#.#
#.#.#######.#.#.#.#####.#.###.#.###.###.#.#.#.#.#####.#########.###.###.#.###.#.#
#.#.#....x#.#.#...#.....#.#...#.#..i#...#.#.#.#...#...#.........#.....#.#...#...#
#.###K#.#.#.#.#####.#####.#.###.#.###.#####.#.###.#####.###.#########.#.#.#.###.#
#...#.#.#.#.#.....#..r#...#...#.#.#.....#...#.....#.....#...#.......#...#.#.....#
#.#.#.#.###.#.###.#####.#####.#.#.#.###.#.#####.###.#####.#########.#####.#####.#
#.#.#.#.....#.#.........#.....#.#.#...#.#.......#...#...#.#.........#.....#...#.#
###.#.#########.#########.#####.#.#####.#####.###.#.#.#.###.#########.#####.#.#.#
#...#...#.....#.#...........#...#.....#.#..t#.#.#.#.#.#.....#...#.........#.#.#.#
#.#####.#.#.#.#.#####.#####.#########.#.#.#.#.#.#.#.#.#######.###.#########.#.###
#.......#.#.#.#.....#...#.#.....#...#.#.#.#.#...#.#.#.....#.......#...#...#.#...#
#.#########.#.###.#.###.#.#####.#.#.#.#.#.#.#####.#.#####.#########.#.#.#.#.###.#
#.#.....#...#...#.#.#...#...#...#.#...#.#.#.......#.#...#.......#q..#...#...#...#
#.###.#.#.#####.###.###.#.###.###.#####.#.#########.###.#######.#.###########.###
#.....#.#...#.#...#...#.#...#...#...#...#...#...#.#.....#.......#.#...#.....#...#
#######.#.#.#.###.#.#.#.###.###.###.###.#.#.#.#.#.#####.#.#######.#.###.#.#####.#
#.....#.#.#.#.....#.#.#.......#...#.....#.#.#.#.#.#.....#.#...#...#...#.#.....#.#
#.#.###.#.#.###.#####.#####.###.#.#####.#.#.#.#.#.#.#####.#.#.#.#####.#.#####.#.#
#.#.#...#.#...#.#...#.#.....#...#...#...#.#...#.#...#...#...#...#.....#.#.....#.#
###.#.###.###.#.#.#.#.#######.#######.###.#####.#.###.#.#########.#.###.#.###.#.#
#...#.#...#...#.#.#.#...#.....#.....#.#.#.#...#.#.#...#.......#...#.....#...#.#.#
#.###.#####.###.#.#.###.#.#####.###.#.#.#.###.#.###.#######.###.###########.###.#
#...........#.....#.....#.........#...........#...........#...............#w....#
#######################################.@.#######################################
#.....#.....#.......#.........#...................#.#...................#...#...#
#.###.###.#.#.#####.#.#.#####.#.#####.#.#.#######.#.#.###############.#.#.#.#.#.#
#...#.....#...#.#...#.#...#.#.#.#.#...#.#.......#...#...#...#...#...#.#...#...#.#
###.#####.#####.#.#######.#.#.#.#.#.###.#.#####.###.###.#.###.#.#.#.#.#########.#
#...#...#.#...#.#.....#...#...#...#...#.#.#...#...#.#...#.#...#...#.#.........#.#
#.###.#.###.#.#.#####.#.###.#########.#.#.###.###.###.###.#.#######.###########.#
#.....#.....#.#.....#...#.#.#.......#.#.#.......#.....#...#.#...................#
#############.#####.#####.#.#.#####.#.#.#######.#######.#.#.###.###############.#
#...........#.....#.......#.#...#.#.#.#.#.....#.........#.#...#.#.........#...#.#
#########.#.#####.#.###.###.###.#.#.#.###.#.#.#######T#######.###.#######.#.###.#
#........f#.#...#.#...#.....#...#...#...#.#.#.#.....#.#.......#...#...#...#.#...#
#.#######.###.#.#.#####.#####.###.#####.#.#.#.#.###.#.#.#######.#####.#.###.#.###
#.#.#.....#...#.#.....#.......#...#.....#.#.#.#.#.#...#.#...#.......#.#.#.......#
#.#.#.#####.###.#.###.#########.###.#.###.#.###.#.#####.#.#.#.#####.#.#.#######.#
#.#.#...#...#.#.#...#.#...#...#.#.#.#...#.#...#.#...#...#.#...#...#...#.#.....#.#
#.#.###.#.###.#.###.#.###.#.#.#.#.#.###.#####.#.#.#.#.###.#####.#.#####.#.###.#.#
#.#.....#.#...#...#.#...#...#.#.#...#.#.#.....#.#.#.#.......#...#.#...#....s#.#v#
#.#.#####.#.#.###.###.#.#.###.#.###.#.#.#.#####.###.#####.###.###.#.#.#######.#.#
#.#...#...#.#...#...#.#.#...#.#...#..y#.#.#.........#...#.#...#.....#.........#.#
#.###.#.#######.###.###.#####.###.#####.#.#.#####.###.#.###.#########.###########
#.#...#.........#.#...#.....#...#.#.....#...#...#.#...#...#.#.......#.#.........#
#.#.###########.#.#########.#.###.#.#########.#.#.#.#####.#.#######R###.#######.#
#.#.#.....Q...#...#.........#...#.#.#...#...#.#.#.#.#...#.....#...#.....#...#.C.#
#.###.#.#########.#.###.#######.#.#.#.#.#.#.#.#.#.#.###.#####.#.#.#########.#.###
#...#.#...#...G.#.#...#.#.#.....#.#...#.#.#.#.#.#.#...#...#...#.#.....#.....#.#.#
#.#.#.###.#.###.#.#####.#.#.#.###.#####.#.#.#.#.#.###.#.#.#.#####.###.#.#####.#.#
#.#.#...#.#.#...#.#.....#.#.#.#...#...I.#.#...#.#...#.#.#.#.#.....#.#...#...#...#
#.#S###.#.#.#.#.#.#.#####.#.#.#.###.###.#.#####.#####.#.#.#.###.###.###.#.#.###.#
#.#.....#...#.#.#...#.......#...#...#.#.#.....#.......#.#.#...#.#.#...#.#.#.....#
#.###########.#######.###########.###.#.#.###.#########.#.###.#.#.#.#.#.#.#######
#e#.......#...#.....#.#.......#...#.#...#.#...#...#.#...#.......#...#...#.#.....#
#.#.#######.#.#.#.###.#.###.###.#.#.#.###N#.###.#.#.#.#########.#####.###.#.###.#
#.#.#.......#.#.#.....#...#.#...#.#.....#.#.#...#.#.#.#..p..#...#...#...#h..#.#.#
#.#.#.#########W#########.#.#.###.#####.###.#.###.#.#.#.###.#####.#B#########.#.#
#...#d....#...#.....#...#.#.....#.....#.#...#.#.#.#.#.#...#.#.....#.#.......#...#
###.#####.#.#.#####.#.#.###.#######.#.#.#.###.#.#.#.#.###.#.#.#####.#.#####.#.###
#...#...#...#.....#...#.V.#.#.....#.#.#.#.#...#z#.#...#...#.#...#.#...#.#.L.#.#.#
#.#####.#######.#########.###.###.###.#.#.#.###J#.#####.###.###.#.#####.#.###.#.#
#.............#...............#.....A.#.#.......#........o#.............#....u..#
#################################################################################" |> Text.toCharList |> parseInput |> collectKeys |> Optional.map Tuple.at2

---

--type Node = { ps : [(Nat, Nat)], ks: Map (Nat, Nat) Char, ds : Map (Nat, Nat) Char, ws : Map (Nat, Nat) Boolean }

startNode : Input -> Node
startNode i = Node.Node [Input.entrance i] (Input.keys i) (Input.doors i) (Input.walls i)

remove : k -> Map k v -> Map k v
remove k m =
  if Map.contains k m then
    Map.toList m |> day16.filter (p -> case p of (k2, v) -> not (k == k2)) |> Map.fromList
  else m

toUpper : Char -> Char
toUpper c = Char.toNat c |> Nat.toInt |> (v -> v + -32) |> abs |> Char.fromNat

neighbors : Node -> [(Node, Nat)]
neighbors n =
  ds =
    Node.ps n
      |> day17.zipWithIndex
      |> List.map (pair -> case pair of (p, i) -> bfs p (unitNeighbors n) |> Map.map (d -> (i, d)))
      |> List.foldl (acc -> m -> Map.union acc m) Map.empty
  g kPos k posI =
    Node.ps.modify (List.replace posI kPos) n
      |> Node.ks.modify (remove kPos)
      |> Node.ds.modify (day10.filter (c -> not (c == (toUpper k))))
  f kPos k =
    Map.lookup kPos ds
      |> Optional.map (v -> [v])
      |> Optional.orDefault []
      |> List.map (p -> case p of (posI, d) -> (g kPos k posI, d))
  Node.ks n |> Map.toList |> List.flatMap (p -> case p of (kPos, k) -> f kPos k)

dijkstra : Node -> (Node -> [(Node, Nat)]) -> Optional (Node, Nat)
dijkstra startNode f =
  goN node dist delta toVisit visited =
    if not (Map.contains node visited) then
      ((node, dist + delta) +: toVisit) |> List.sortBy (Tuple.at2)
    else toVisit
  go toVisit visited = case toVisit of
    [] -> None
    (node, dist) +: t ->
      if not (Map.contains node visited) then
        if isTarget node then Some (node, dist)
        else
          nVisited = Map.insert node dist visited
          nToVisit = f node |> List.foldl (tv -> p -> case p of (n, d) -> goN n dist d tv nVisited) toVisit
          go nToVisit nVisited
      else go t visited
  go [(startNode, 0)] Map.empty

isTarget : Node -> Boolean
isTarget n = (Node.ks n |> Map.toList |> List.size) == 0

unitNeighbors : Node -> (Nat, Nat) -> [(Nat, Nat)]
unitNeighbors n p =
  if Node.ks n |> Map.contains p then []
  else
    List.map (o -> day17.add p o) [(+0, +1), (+0, -1), (-1, +0), (+1, +0)]
      |> day16.filter (p -> not (Node.ds n |> Map.contains p) && (not (Node.ws n |> Map.contains p)))

bfs : (Nat, Nat) -> ((Nat, Nat) -> [(Nat, Nat)]) -> Map (Nat, Nat) Nat
bfs startNode f =
  go visited toVisit =
    neighbors = List.flatMap ( p -> case p of (n, d) ->
      f n |> List.map (p -> (p, (d + 1)))) (Map.toList toVisit)
    nVisited = Map.union visited toVisit
    nToVisit = day16.filter (p -> case p of (n, d) -> not (Map.contains n visited)) neighbors
    case nToVisit of
      [] -> nVisited
      _ -> go nVisited (Map.fromList nToVisit)
  go Map.empty (Map.insert startNode 0 Map.empty)

collectKeys : Input -> Optional (Node, Nat)
collectKeys input =
  startNode input |> (sn -> dijkstra sn neighbors)

use test.v1
test> tests.day18.collectKeys.ex1 = run ( expect ( "#########
#b.A.@.a#
#########" |> Text.toCharList |> parseInput |> collectKeys |> Optional.map Tuple.at2 == Some 8))
test> tests.day18.collectKeys.ex2 = run ( expect ( "########################
#f.D.E.e.C.b.A.@.a.B.c.#
######################.#
#d.....................#
########################" |> Text.toCharList |> parseInput |> collectKeys |> Optional.map Tuple.at2 == Some 86))
test> tests.day18.collectKeys.ex3 = run ( expect ( "########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################" |> Text.toCharList |> parseInput |> collectKeys |> Optional.map Tuple.at2 == Some 132))
test> tests.day18.collectKeys.ex5 = run ( expect ( "########################
#@..............ac.GI.b#
###d#e#f################
###A#B#C################
###g#h#i################
########################" |> Text.toCharList |> parseInput |> collectKeys |> Optional.map Tuple.at2 == Some 81))

test> tests.day18.collectKeys.ex4 = run ( expect ( "#################
#i.G..c...e..H.p#
########.########
#j.A..b...f..D.o#
########@########
#k.E..a...g..B.n#
########.########
#l.F..d...h..C.m#
#################" |> Text.toCharList |> parseInput |> collectKeys |> Optional.map Tuple.at2 == Some 136))

type Input = {
  walls : Map (Nat, Nat) Boolean,
  entrance: (Nat, Nat),
  keys: Map (Nat, Nat) Char,
  doors : Map (Nat, Nat) Char
}

parseInput : [Char] -> Input
parseInput cs =
  go ps i j s = case ps of
    h +: t -> case h of
      ?\n -> go t 0 (j + 1) s
      ?@ -> Input.entrance.set (i, j) s |> go t (i + 1) j
      ?# -> Input.walls.modify (Map.insert (i, j) true) s |> go t (i + 1) j
      c | Char.toNat c >= 65 && (Char.toNat c <= 90) ->
        Input.doors.modify (Map.insert (i, j) c) s |> go t (i + 1) j
      c | Char.toNat c >= 97 && (Char.toNat c <= 122) ->
        Input.keys.modify (Map.insert (i, j) c) s |> go t (i + 1) j
      _ -> go t (i + 1) j s
    _ -> s
  go cs 0 0 (Input.Input Map.empty (0, 0) Map.empty Map.empty)
