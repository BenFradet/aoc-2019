---
namespace day5 where

  abs : Int -> Nat
  abs i =
    if i < +0 then
      use Int *
      Nat.truncate0 (i * -1)
    else Nat.truncate0 i

  nbParamsPerOpCode : Nat -> Nat
  nbParamsPerOpCode opCode = case opCode of
    1 -> 3
    2 -> 3
    3 -> 1
    4 -> 1
    5 -> 2
    6 -> 2
    7 -> 3
    8 -> 3
    _ -> 0

  fill : Nat -> a -> [a] -> [a]
  fill n a xs =
    go c as =
      if c >= n then as
      else go (c + 1) (a +: as)
    go (List.size xs) xs

  parseOp : Int -> (Nat, [Nat])
  parseOp opCode =
    opCodeAbs = abs opCode
    op = Nat.mod opCodeAbs 100
    remainder = opCodeAbs / 100
    parameters = day4.digits remainder
    nbParams = nbParamsPerOpCode op
    (op, List.reverse (fill nbParams 0 parameters))

  getValue : Nat -> Boolean -> [Int] -> Int
  getValue idx immediateMode input =
    if immediateMode then
      List.at idx input
        |> Optional.orDefault +0
    else
      List.at idx input
        |> Optional.flatMap (deref -> List.at (abs deref) input)
        |> Optional.orDefault +0

  getValue' : Nat -> [Nat] -> Nat -> [Int] -> Int
  getValue' idx modes idxMode input =
    mode = List.at idxMode modes |> Optional.orDefault 1
    getValue idx (mode == 1) input

  binaryInstr : Nat -> [Nat] -> (Int -> Int -> Int) -> [Int] -> [Int]
  binaryInstr idx modes f input =
    List.replace (abs (getValue (idx + 3) true input)) (
      f (getValue' (idx + 1) modes 0 input) (getValue' (idx + 2) modes 1 input)
    ) input

  unaryInstr : Nat -> (Int -> Int) -> [Int] -> [Int]
  unaryInstr idx f input =
    v = getValue (idx + 1) true input
    List.replace (abs v) (f v) input

  newIntCode'' : Nat -> Nat -> [Int] -> Int
  newIntCode'' p1 p2 input =
    size = List.size input
    go idx acc flag input =
      if idx >= size then acc
      else case List.at idx input of
        Some op ->
          operation = parseOp op
          modes = Tuple.at2 operation
          opCode = Tuple.at1 operation
          nbParams = nbParamsPerOpCode opCode
          case opCode of
            1 ->
              binaryInstr idx modes (Int.+) input
                |> go (idx + nbParams + 1) acc flag
            2 ->
              binaryInstr idx modes (Int.*) input
                |> go (idx + nbParams + 1) acc flag
            3 ->
              unaryInstr idx (_ -> Nat.toInt (if flag then p1 else p2)) input
                |> go (idx + nbParams + 1) acc (not flag)
            4 ->
              getValue' (idx + 1) modes 0 input
                |> (v -> go (idx + nbParams + 1) (v +: acc) flag input)
            5 ->
              if not ((getValue' (idx + 1) modes 0 input) == +0) then
                go (abs (getValue' (idx + 2) modes 1 input)) acc flag input
              else go (idx + nbParams + 1) acc flag input
            6 ->
              if (getValue' (idx + 1) modes 0 input) == +0 then
                go (abs (getValue' (idx + 2) modes 1 input)) acc flag input
              else go (idx + nbParams + 1) acc flag input
            7 ->
              f a b = if a < b then +1 else +0
              binaryInstr idx modes f input
                |> go (idx + nbParams + 1) acc flag
            8 ->
              f a b = if a == b then +1 else +0
              binaryInstr idx modes f input
                |> go (idx + nbParams + 1) acc flag
            _ -> acc
        _ -> acc
    go 0 [] true input
      |> List.at 0
      |> Optional.orDefault +0

  newIntCode' : Nat -> [Int] -> [Int]
  newIntCode' parameter input =
    size = List.size input
    go idx acc input =
      if idx >= size then acc
      else case List.at idx input of
        Some op ->
          operation = parseOp op
          modes = Tuple.at2 operation
          opCode = Tuple.at1 operation
          nbParams = nbParamsPerOpCode opCode
          case opCode of
            1 ->
              binaryInstr idx modes (Int.+) input
                |> go (idx + nbParams + 1) acc
            2 ->
              binaryInstr idx modes (Int.*) input
                |> go (idx + nbParams + 1) acc
            3 ->
              unaryInstr idx (_ -> Nat.toInt parameter) input
                |> go (idx + nbParams + 1) acc
            4 ->
              getValue' (idx + 1) modes 0 input
                |> (v -> go (idx + nbParams + 1) (v +: acc) input)
            5 ->
              if not ((getValue' (idx + 1) modes 0 input) == +0) then
                go (abs (getValue' (idx + 2) modes 1 input)) acc input
              else go (idx + nbParams + 1) acc input
            6 ->
              if (getValue' (idx + 1) modes 0 input) == +0 then
                go (abs (getValue' (idx + 2) modes 1 input)) acc input
              else go (idx + nbParams + 1) acc input
            7 ->
              f a b = if a < b then +1 else +0
              binaryInstr idx modes f input
                |> go (idx + nbParams + 1) acc
            8 ->
              f a b = if a == b then +1 else +0
              binaryInstr idx modes f input
                |> go (idx + nbParams + 1) acc
            _ -> acc
        _ -> acc
    go 0 [] input

input = [+3,+225,+1,+225,+6,+6,+1100,+1,+238,+225,+104,+0,+101,+14,+135,+224,+101,-69,+224,+224,+4,+224,+1002,+223,+8,+223,+101,+3,+224,+224,+1,+224,+223,+223,+102,+90,+169,+224,+1001,+224,-4590,+224,+4,+224,+1002,+223,+8,+223,+1001,+224,+1,+224,+1,+224,+223,+223,+1102,+90,+45,+224,+1001,+224,-4050,+224,+4,+224,+102,+8,+223,+223,+101,+5,+224,+224,+1,+224,+223,+223,+1001,+144,+32,+224,+101,-72,+224,+224,+4,+224,+102,+8,+223,+223,+101,+3,+224,+224,+1,+223,+224,+223,+1102,+36,+93,+225,+1101,+88,+52,+225,+1002,+102,+38,+224,+101,-3534,+224,+224,+4,+224,+102,+8,+223,+223,+101,+4,+224,+224,+1,+223,+224,+223,+1102,+15,+57,+225,+1102,+55,+49,+225,+1102,+11,+33,+225,+1101,+56,+40,+225,+1,+131,+105,+224,+101,-103,+224,+224,+4,+224,+102,+8,+223,+223,+1001,+224,+2,+224,+1,+224,+223,+223,+1102,+51,+39,+225,+1101,+45,+90,+225,+2,+173,+139,+224,+101,-495,+224,+224,+4,+224,+1002,+223,+8,+223,+1001,+224,+5,+224,+1,+223,+224,+223,+1101,+68,+86,+224,+1001,+224,-154,+224,+4,+224,+102,+8,+223,+223,+1001,+224,+1,+224,+1,+224,+223,+223,+4,+223,+99,+0,+0,+0,+677,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+0,+1105,+0,+99999,+1105,+227,+247,+1105,+1,+99999,+1005,+227,+99999,+1005,+0,+256,+1105,+1,+99999,+1106,+227,+99999,+1106,+0,+265,+1105,+1,+99999,+1006,+0,+99999,+1006,+227,+274,+1105,+1,+99999,+1105,+1,+280,+1105,+1,+99999,+1,+225,+225,+225,+1101,+294,+0,+0,+105,+1,+0,+1105,+1,+99999,+1106,+0,+300,+1105,+1,+99999,+1,+225,+225,+225,+1101,+314,+0,+0,+106,+0,+0,+1105,+1,+99999,+108,+226,+677,+224,+1002,+223,+2,+223,+1006,+224,+329,+1001,+223,+1,+223,+1007,+226,+226,+224,+1002,+223,+2,+223,+1006,+224,+344,+101,+1,+223,+223,+1008,+226,+226,+224,+102,+2,+223,+223,+1006,+224,+359,+1001,+223,+1,+223,+107,+226,+677,+224,+1002,+223,+2,+223,+1005,+224,+374,+101,+1,+223,+223,+1107,+677,+226,+224,+102,+2,+223,+223,+1006,+224,+389,+101,+1,+223,+223,+108,+677,+677,+224,+102,+2,+223,+223,+1006,+224,+404,+1001,+223,+1,+223,+1108,+677,+226,+224,+102,+2,+223,+223,+1005,+224,+419,+101,+1,+223,+223,+1007,+677,+226,+224,+1002,+223,+2,+223,+1006,+224,+434,+101,+1,+223,+223,+1107,+226,+226,+224,+1002,+223,+2,+223,+1006,+224,+449,+101,+1,+223,+223,+8,+677,+226,+224,+102,+2,+223,+223,+1006,+224,+464,+1001,+223,+1,+223,+1107,+226,+677,+224,+102,+2,+223,+223,+1005,+224,+479,+1001,+223,+1,+223,+1007,+677,+677,+224,+102,+2,+223,+223,+1005,+224,+494,+1001,+223,+1,+223,+1108,+677,+677,+224,+102,+2,+223,+223,+1006,+224,+509,+101,+1,+223,+223,+1008,+677,+677,+224,+102,+2,+223,+223,+1005,+224,+524,+1001,+223,+1,+223,+107,+226,+226,+224,+1002,+223,+2,+223,+1005,+224,+539,+101,+1,+223,+223,+7,+226,+226,+224,+102,+2,+223,+223,+1005,+224,+554,+101,+1,+223,+223,+1108,+226,+677,+224,+1002,+223,+2,+223,+1006,+224,+569,+1001,+223,+1,+223,+107,+677,+677,+224,+102,+2,+223,+223,+1005,+224,+584,+101,+1,+223,+223,+7,+677,+226,+224,+1002,+223,+2,+223,+1005,+224,+599,+101,+1,+223,+223,+108,+226,+226,+224,+1002,+223,+2,+223,+1005,+224,+614,+101,+1,+223,+223,+1008,+677,+226,+224,+1002,+223,+2,+223,+1005,+224,+629,+1001,+223,+1,+223,+7,+226,+677,+224,+102,+2,+223,+223,+1005,+224,+644,+101,+1,+223,+223,+8,+677,+677,+224,+102,+2,+223,+223,+1005,+224,+659,+1001,+223,+1,+223,+8,+226,+677,+224,+102,+2,+223,+223,+1006,+224,+674,+1001,+223,+1,+223,+4,+223,+99,+226]

> parseOp +102
> newIntCode' 5 input
