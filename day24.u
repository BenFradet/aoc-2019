---
> "...#.
#.##.
#..##
#.###
##..." |> parseInput |> lifeR 200 |> count

count : Map Int (Map (Nat, Nat) Boolean) -> Nat
count m =
  Map.toList m
    |> List.flatMap (p -> case p of (l, m) -> Map.toList m |> List.map Tuple.at2)
    |> day8.count true

lifeR : Nat -> Map (Nat, Nat) Boolean -> Map Int (Map (Nat, Nat) Boolean)
lifeR n start =
  go i acc =
    if i >= n then evolveR (Nat.toInt i) acc
    else evolveR (Nat.toInt i) acc |> go (i + 1)
  [(+0, start)] |> Map.fromList |> go 0

renderR : Map Int (Map (Nat, Nat) Boolean) -> Text
renderR m =
  f acc e = case e of (l, m) ->
    acc ++ "level " ++ (Int.toText l) ++ ": " ++ (render m) ++ "\n"
  Map.toList m |> List.foldl f ""

evolveR : Int -> Map Int (Map (Nat, Nat) Boolean) -> Map Int (Map (Nat, Nat) Boolean)
evolveR l s =
  f l acc e = case e of
    ((2, 2), f) -> Map.insert (2, 2) false acc
    (p, true) ->
      if adjacentBugsR (l, p) s == 1 then Map.insert p true acc
      else Map.insert p false acc
    (p, false) ->
      size = adjacentBugsR (l, p) s
      if size == 1 || (size == 2) then Map.insert p true acc
      else Map.insert p false acc
  Map.toList s
    |> List.map (p -> case p of (l, m) -> (l, Map.toList m |> List.foldl (f l) Map.empty))
    |> Map.fromList
    |> Map.insert (l + +1) blank
    |> Map.insert ((l + +1) |> negate) blank

adjacentsR : (Int, (Nat, Nat)) -> [(Int, (Nat, Nat))]
adjacentsR p = case p of (l, (x, y)) ->
  f acc e = case e of (xe, ye) ->
    nx = (Nat.toInt x) + xe
    ny = (Nat.toInt y) + ye
    g f = List.range 0 size |> List.map (x -> (l + +1, f x))
    case (nx, ny) of
      (+2, +2) -> case (x, y) of
        (2, 1) -> g (x -> (x, 0)) ++ acc
        (1, 2) -> g (y -> (0, y)) ++ acc
        (2, 3) -> g (x -> (x, 4)) ++ acc
        (3, 2) -> g (y -> (4, y)) ++ acc
      (-1, y) -> (l + -1, (1, 2)) +: acc
      (+5, y) -> (l + -1, (3, 2)) +: acc
      (x, -1) -> (l + -1, (2, 1)) +: acc
      (x, +5) -> (l + -1, (2, 3)) +: acc
      (x, y)  -> (l, (day5.abs nx, day5.abs ny)) +: acc
  [(+0, -1), (+0, +1), (-1, +0), (+1, +0)]
    |> List.foldl f []

adjacentBugsR : (Int, (Nat, Nat)) -> Map Int (Map (Nat, Nat) Boolean) -> Nat
adjacentBugsR p m =
  adjacentsR p
    |> List.map (p -> case p of (l, c) -> Map.lookup l m |> Optional.flatMap (Map.lookup c))
    |> day8.count (Some true)

---

blank : Map (Nat, Nat) Boolean
blank =
  day19.pairs (List.range 0 size) (List.range 0 size)
    |> List.map (p -> (p, false))
    |> Map.fromList

---
size : Nat
size = 5

test> tests.day24.adjacentsR.ex1 = run ( expect ( adjacentsR (+0, (3, 3)) == [(+0, (4, 3)), (+0, (2, 3)), (+0, (3, 4)), (+0, (3, 2))] ) )
test> tests.day24.adjacentsR.ex2 = run ( expect ( adjacentsR (+0, (1, 1)) == [(+0, (2, 1)), (+0, (0, 1)), (+0, (1, 2)), (+0, (1, 0))] ) )
test> tests.day24.adjacentsR.ex3 = run ( expect ( adjacentsR (+0, (3, 0)) == [(+0, (4, 0)), (+0, (2, 0)), (+0, (3, 1)), (+1, (2, 1))] ) )
test> tests.day24.adjacentsR.ex4 = run ( expect ( adjacentsR (+0, (4, 0)) == [(+1, (3, 2)), (+0, (3, 0)), (+0, (4, 1)), (+1, (2, 1))] ) )
test> tests.day24.adjacentsR.ex5 = run ( expect ( adjacentsR (+0, (3, 2)) == [ (+0, (4, 2)), (-1, (4, 0)), (-1, (4, 1)), (-1, (4, 2)), (-1, (4, 3)), (-1, (4, 4)), (+0, (3, 3)), (+0, (3, 1)) ]

--- p1

> "...#.
#.##.
#..##
#.###
##..." |> parseInput |> life

life : Map (Nat, Nat) Boolean -> (Nat, Map (Nat, Nat) Boolean)
life start =
  go s acc =
    ns = evolve s
    r = rating 5 ns
    case Map.lookup r acc of
      Some s -> (r, s)
      _ -> Map.insert r ns acc |> go ns
  go start Map.empty

test> tests.day24.life.ex1 = run ( expect ( "....#
#..#.
#..##
..#..
#...." |> parseInput |> life |> (p -> case p of (n, s) -> (n, render s)) == (2129920, "\n.....\n.....\n.....\n#....\n.#...") ) )

rating : Nat -> Map (Nat, Nat) Boolean -> Nat
rating w s =
  f acc e = case e of
    ((x, y), true) -> x + (y * w) |> pow2 |> (p -> p + acc)
    _ -> acc
  Map.toList s |> List.foldl f 0

use test.v1

test> tests.day24.evolve.ex1 = run ( expect ( "....#
#..#.
#..##
..#..
#...." |> parseInput |> evolve |> render == "\n#..#.\n####.\n###.#\n##.##\n.##.." ) )
test> tests.day24.evolve.ex2 = run ( expect ( "#..#.
####.
###.#
##.##
.##.." |> parseInput |> evolve |> render == "\n#####\n....#\n....#\n...#.\n#.###" ) )
test> tests.day24.evolve.ex3 = run ( expect ( "#####
....#
....#
...#.
#.###" |> parseInput |> evolve |> render == "\n#....\n####.\n...##\n#.##.\n.##.#" ) )
test> tests.day24.evolve.ex4 = run ( expect ( "#....
####.
...##
#.##.
.##.#" |> parseInput |> evolve |> render == "\n####.\n....#\n##..#\n.....\n##..." ) )

render : Map (Nat, Nat) Boolean -> Text
render m =
  go cs acc = case cs of
    ((0, j), f) +: t -> [(if f then ?# else ?.), ?\n] ++ acc |> go t
    ((i, j), f) +: t -> (if f then ?# else ?.) +: acc |> go t
    _ -> acc
  Map.toList m |> List.sortBy (p -> case p of ((x, y), f) -> y) |> (cs -> go cs []) |> List.reverse |> Text.fromCharList

evolve : Map (Nat, Nat) Boolean -> Map (Nat, Nat) Boolean
evolve s =
  f acc e = case e of
    (p, true) ->
      if adjacentBugs p s == 1 then Map.insert p true acc
      else Map.insert p false acc
    (p, false) ->
      size = adjacentBugs p s
      if size == 1 || (size == 2) then Map.insert p true acc
      else Map.insert p false acc
  Map.toList s
    |> List.foldl f Map.empty

adjacentBugs : (Nat, Nat) -> Map (Nat, Nat) Boolean -> Nat
adjacentBugs p m =
  adjacents p
    |> List.map (p -> Map.lookup p m)
    |> day6.flatten
    |> day16.filter id
    |> List.size

adjacents : (Nat, Nat) -> [(Nat, Nat)]
adjacents p = case p of (x, y) ->
  f acc e = case e of (xe, ye) ->
    nx = (Nat.toInt x) + xe
    ny = (Nat.toInt y) + ye
    if nx >= +0 && (ny >= +0) then (day5.abs nx, day5.abs ny) +: acc
    else acc
  [(+0, -1), (+0, +1), (-1, +0), (+1, +0)]
    |> List.foldl f []

parseInput : Text -> Map (Nat, Nat) Boolean
parseInput t =
  go i j cs acc = case cs of
    h +: t -> case h of
      ?\n -> go 0 (j + 1) t acc
      ?# -> Map.insert (i, j) true acc |> go (i + 1) j t
      _ -> Map.insert (i, j) false acc |> go (i + 1) j t
    _ -> acc
  Text.toCharList t |> (cs -> go 0 0 cs Map.empty)

pow2 : Nat -> Nat
pow2 n = Nat.toInt n |> Int.toFloat |> Float.pow 2.0 |> truncate |> abs
